// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String        @default("Unknown")
  email         String        @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  teamsCreated  Team[]
  memberships   TeamMember[]
  TeamMessage   TeamMessage[]

  @@map("users")
}

model TeamMessage {
  id          String   @id @default(cuid())
  message     String
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
  sender      User     @relation(fields: [senderId], references: [id])
  senderId    String
  softDeleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Team {
  id          String        @id @default(cuid())
  pid         String        @unique @default(cuid())
  name        String
  description String?
  creator     User          @relation(fields: [creatorId], references: [id])
  creatorId   String
  members     TeamMember[]
  TeamMessage TeamMessage[]
  TeamColumn  TeamColumn[]
  TeamTask    TeamTask[]
}

model TeamColumn {
  id       String     @id @default(cuid())
  pid      Int        @unique
  title    String
  team     Team       @relation(fields: [teamId], references: [id])
  teamId   String
  TeamTask TeamTask[]

  @@unique([pid, teamId])
}

model TeamTask {
  id            String     @id @default(cuid())
  pid           Int        @unique
  content       String
  column        TeamColumn @relation(fields: [teamColumnPid, teamId], references: [pid, teamId], onDelete: Cascade)
  teamColumnPid Int
  teamId        String
  Team          Team       @relation(fields: [teamId], references: [id])
}

model TeamMember {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  role Role @default(user)

  @@id([userId, teamId])
}
